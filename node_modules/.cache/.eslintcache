[{"/workspace/karangos-mat-2021-2/src/index.js":"1","/workspace/karangos-mat-2021-2/src/App.js":"2","/workspace/karangos-mat-2021-2/src/reportWebVitals.js":"3","/workspace/karangos-mat-2021-2/src/ui/AppHeader.js":"4","/workspace/karangos-mat-2021-2/src/ui/AppFooter.js":"5","/workspace/karangos-mat-2021-2/src/routed/ClientesForm.js":"6","/workspace/karangos-mat-2021-2/src/routed/ClientesList.js":"7","/workspace/karangos-mat-2021-2/src/ui/MainMenu.js":"8","/workspace/karangos-mat-2021-2/src/ui/ConfirmDialog.js":"9","/workspace/karangos-mat-2021-2/src/routed/KarangosList.js":"10"},{"size":500,"mtime":1637249627000,"results":"11","hashOfConfig":"12"},{"size":1577,"mtime":1637788468458,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1637249627000,"results":"14","hashOfConfig":"12"},{"size":547,"mtime":1637249627000,"results":"15","hashOfConfig":"12"},{"size":1390,"mtime":1637262560000,"results":"16","hashOfConfig":"12"},{"size":12477,"mtime":1637789098066,"results":"17","hashOfConfig":"12"},{"size":6207,"mtime":1637249627000,"results":"18","hashOfConfig":"12"},{"size":1888,"mtime":1637257401000,"results":"19","hashOfConfig":"12"},{"size":1203,"mtime":1637249627000,"results":"20","hashOfConfig":"12"},{"size":6788,"mtime":1637331470000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"p77aji",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/workspace/karangos-mat-2021-2/src/index.js",[],["45","46"],"/workspace/karangos-mat-2021-2/src/App.js",[],"/workspace/karangos-mat-2021-2/src/reportWebVitals.js",[],"/workspace/karangos-mat-2021-2/src/ui/AppHeader.js",[],"/workspace/karangos-mat-2021-2/src/ui/AppFooter.js",[],"/workspace/karangos-mat-2021-2/src/routed/ClientesForm.js",["47","48"],"import * as React from 'react'\r\nimport TextField from '@mui/material/TextField'\r\nimport InputMask from 'react-input-mask'\r\nimport { makeStyles } from '@mui/styles'\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport ptLocale from 'date-fns/locale/pt-BR';\r\nimport MenuItem from '@mui/material/MenuItem'\r\nimport Button from '@mui/material/Button'\r\nimport Toolbar from '@mui/material/Toolbar'\r\nimport validator from 'validator'\r\nimport { validate as cpfValidate, validate } from 'gerador-validador-cpf'\r\nimport { isFuture as dateIsFuture, isValid as dateIsValid } from 'date-fns'\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Snackbar from '@mui/material/Snackbar'\r\n\r\nconst useStyles = makeStyles(theme => (\r\n  {\r\n    form: {\r\n      maxWidth: '80%',\r\n      margin: '0 auto',\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      flexWrap: 'wrap',\r\n      '& .MuiFormControl-root': {\r\n        minWidth: '200px',\r\n        maxWidth: '500px',\r\n        marginBottom: '24px',\r\n      }\r\n    },\r\n    toolbar: {\r\n      width: '100%',\r\n      justifyContent: 'space-around'\r\n    }\r\n  }\r\n))\r\n\r\nconst unidadesFed = [\r\n  { sigla: 'DF', nome: 'Distrito Federal'},\r\n  { sigla: 'ES', nome: 'Espírito Santo'},\r\n  { sigla: 'GO', nome: 'Goiás'},\r\n  { sigla: 'MS', nome: 'Mato Grosso do Sul'},\r\n  { sigla: 'MG', nome: 'Minas Gerais'},\r\n  { sigla: 'PR', nome: 'Paraná'},\r\n  { sigla: 'RJ', nome: 'Rio de Janeiro'},\r\n  { sigla: 'SP', nome: 'São Paulo' }\r\n]\r\n\r\nconst formatChars = {\r\n  '9': '[0-9]',   // Dígito obrigatório\r\n  '#': '[0-9]?'   // Dígito opcional\r\n}\r\n\r\nexport default function ClientesForm() {\r\n\r\n  const classes = useStyles()\r\n  const history = useHistory()\r\n\r\n  const [state, setState] = React.useState({\r\n    cliente: {}, // Objeto vazio,\r\n    errors: {},\r\n    formValid: true,\r\n    isSnackOpen: false,\r\n    snackMessage: '',\r\n    isSendingError: false,\r\n    btnSendLabel: 'Enviar'\r\n  })\r\n  const { cliente, errors, formValid, isSnackOpen, snackMessage, isSendingError, btnSendLabel } = state\r\n\r\n  function handleInputChange(event, field = event.target.id) {\r\n\r\n    // Preencher a variável de estado \"cliente\" com o valor\r\n    // dos inputs\r\n    const newCliente = {...cliente}\r\n\r\n    if(field === 'data_nascimento') {\r\n      newCliente[field] = event\r\n    }\r\n    // trim() retira espaços em branco antes e depois da string\r\n    else newCliente[field] = event.target.value \r\n\r\n    // Chama a validação do formulário\r\n    const newErrors = formValidate(newCliente)\r\n    const newFormValid = Object.keys(newErrors).length === 0\r\n\r\n    setState({...state, cliente: newCliente, errors: newErrors, formValid: newFormValid})\r\n  }\r\n  \r\n  function formValidate(fields) {\r\n\r\n    const newErrors = {}\r\n\r\n    // Validação do campo \"nome\", mínimo de 5 caracteres, contendo pelo menos\r\n    // um espaço entre palavras\r\n    \r\n    if(!fields.nome || !(validator.isLength(fields.nome.trim(), {min: 5}) \r\n      && validator.contains(fields.nome.trim(), ' '))) {\r\n      newErrors.nome = 'Informe o nome completo'\r\n    }\r\n    \r\n    // Validação do campo \"cpf\": precisa ser válido\r\n    if(!fields.cpf || !cpfValidate(fields.cpf)) {\r\n      newErrors.cpf = 'CPF inválido'\r\n    }\r\n\r\n    // Validação do campo \"rg\": 4 caracteres, no mínimo\r\n    if(!fields.rg || !validator.isLength(fields.rg.trim(), {min: 4})) {\r\n      newErrors.rg = 'Doc. identidade incompleto ou não informado'\r\n    }\r\n\r\n    // Validação do campo \"data_nascimento\": deve ser válida e não pode ser futura\r\n    if(!fields.data_nascimento || !dateIsValid(fields.data_nascimento) \r\n      || dateIsFuture(fields.data_nascimento)) {\r\n        newErrors.data_nascimento = 'Data inválida ou no futuro'\r\n    }\r\n\r\n    // Validação do campo \"logradouro\": 4 caracteres, no mínimo\r\n    if(!fields.logradouro || !validator.isLength(fields.logradouro.trim(), {min: 4})) {\r\n      newErrors.logradouro = 'Logradouro incompleto ou não informado'\r\n    }\r\n\r\n    // Validação do campo \"num_imovel\": 1 caracter, no mínimo\r\n    if(!fields.num_imovel || !validator.isLength(fields.num_imovel.trim(), {min: 1})) {\r\n      newErrors.num_imovel = 'Número não informado'\r\n    }\r\n\r\n    // Validação do campo \"bairro\": 3 caracteres, no mínimo\r\n    if(!fields.bairro || !validator.isLength(fields.bairro.trim(), {min: 3})) {\r\n      newErrors.bairro = 'Bairro incompleto ou não informado'\r\n    }\r\n\r\n    // Validação do campo \"municipio\": 3 caracteres, no mínimo\r\n    if(!fields.municipio || !validator.isLength(fields.municipio.trim(), {min: 3})) {\r\n      newErrors.municipio = 'Município incompleto ou não informado'\r\n    }\r\n\r\n    // Validação do campo \"uf\": 2 caracteres (mínimo e máximo)\r\n    if(!fields.uf || !validator.isLength(fields.uf.trim(), {min: 2, max: 2})) {\r\n      newErrors.uf = 'Selecione a UF'\r\n    }\r\n\r\n    // Validação do campo \"telefone\": não pode conter sublinhado, indicando que\r\n    // a entrada com máscara está incompleta\r\n    if(!fields.telefone || validator.contains(fields.telefone, '_')) {\r\n      newErrors.telefone = 'Telefone inválido'\r\n    }\r\n\r\n    // Validação do campo \"email\": deve ser um endereço de e-mail válido\r\n    if(!fields.email || !validator.isEmail(fields.email)) {\r\n      newErrors.email = 'E-mail inválido ou não informado'\r\n    }\r\n    \r\n    return newErrors\r\n\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n\r\n    // Evita o recarregamento da página\r\n    event.preventDefault()\r\n\r\n    if(formValid) saveData()\r\n\r\n  }\r\n\r\n  function saveData() {\r\n\r\n    // Desabilita o botão de envio para evitar cliques duplicados\r\n    // e múltiplos envios dos mesmos dados\r\n    setState({...state, btnSendLabel: 'Enviando...'})\r\n\r\n    axios.post('https://api.faustocintra.com.br/clientes', cliente)\r\n      .then(\r\n        () => {\r\n          setState({\r\n            ...state, \r\n            isSnackOpen: true,\r\n            snackMessage: 'Dados salvos com sucesso!',\r\n            isSendingError: false,\r\n            btnSendLabel: 'Enviar' // Reabilita o botão de envio \r\n          })\r\n          \r\n        }\r\n      )\r\n      .catch(\r\n        error => {\r\n          setState({\r\n            ...state, \r\n            isSnackOpen: true,\r\n            snackMessage: 'ERRO: ' + error.message,\r\n            isSendingError: true,\r\n            btnSendLabel: 'Enviar' // Reabilita o botão de envio \r\n          })  \r\n        }\r\n      )\r\n  }\r\n\r\n  function handleSnackClose(event, reason) {\r\n    // Evita que o snackbar seja fechado clicando-se fora dele \r\n    if (reason === 'clickaway') return\r\n    \r\n    // Fechamento em condições normais\r\n    setState({...state, isSnackOpen: false})\r\n    \r\n    // Retorna ao componente de listagem\r\n    history.push('/clientes')\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Cadastro de novo cliente</h1>\r\n\r\n      <div>\r\n        {JSON.stringify(cliente)}<br />\r\n        {'formValid: ' + formValid}<br />\r\n        {'errors:' + JSON.stringify(errors)}\r\n      </div>\r\n\r\n      <Snackbar\r\n        open={isSnackOpen}\r\n        autoHideDuration={6000}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n        action={\r\n          <Button color=\"secondary\" onClick={handleSnackClose}>\r\n            {isSendingError ? 'Que pena!' : 'Entendi'}\r\n          </Button>\r\n        }\r\n      />\r\n\r\n      <form className={classes.form} onSubmit={handleSubmit}>\r\n        \r\n        <TextField \r\n          id=\"nome\" \r\n          label=\"Nome\" \r\n          variant=\"filled\"\r\n          value={cliente.nome}\r\n          required\r\n          fullWidth\r\n          onChange={handleInputChange}\r\n          error={errors?.nome}\r\n          helperText={errors?.nome}\r\n        />\r\n\r\n        <InputMask\r\n          mask=\"999.999.999-99\"\r\n          value={cliente.cpf}\r\n          onChange={handleInputChange}\r\n        >\r\n          {\r\n            () => <TextField \r\n              id=\"cpf\"\r\n              label=\"CPF\" \r\n              variant=\"filled\"\r\n              required\r\n              fullWidth\r\n              error={errors?.cpf}\r\n              helperText={errors?.cpf}\r\n            />\r\n          }\r\n        </InputMask>\r\n\r\n        <TextField \r\n          id=\"rg\" \r\n          label=\"Doc. Identidade\" \r\n          variant=\"filled\"\r\n          value={cliente.rg}\r\n          required\r\n          fullWidth\r\n          onChange={handleInputChange}\r\n          error={errors?.rg}\r\n          helperText={errors?.rg}\r\n        />\r\n\r\n        <LocalizationProvider dateAdapter={AdapterDateFns} locale={ptLocale}>\r\n          { /* new Date() => data de hoje, previne digitação de datas futuras */ }\r\n          <DatePicker\r\n            label=\"Data de nascimento\"\r\n            value={cliente.data_nascimento}\r\n            onChange={event => handleInputChange(event, 'data_nascimento')}\r\n            renderInput={(params) => \r\n              <TextField \r\n                {...params}\r\n                id=\"data_nascimento\"\r\n                variant=\"filled\"\r\n                fullWidth \r\n                error={errors?.data_nascimento}\r\n                helperText={errors?.data_nascimento}\r\n              />\r\n            }\r\n          />\r\n        </LocalizationProvider>\r\n\r\n        <TextField \r\n          id=\"logradouro\" \r\n          label=\"Logradouro (Rua, Av., etc.)\" \r\n          variant=\"filled\"\r\n          value={cliente.logradouro}\r\n          required\r\n          fullWidth\r\n          onChange={handleInputChange}\r\n          error={errors?.logradouro}\r\n          helperText={errors?.logradouro}\r\n        />\r\n\r\n        <TextField \r\n          id=\"num_imovel\" \r\n          label=\"Nº\" \r\n          variant=\"filled\"\r\n          value={cliente.num_imovel}\r\n          required\r\n          fullWidth\r\n          onChange={handleInputChange}\r\n          error={errors?.num_imovel}\r\n          helperText={errors?.num_imovel}\r\n        />\r\n\r\n        <TextField \r\n          id=\"complemento\" \r\n          label=\"Complemento\" \r\n          variant=\"filled\"\r\n          value={cliente.complemento}\r\n          fullWidth\r\n          onChange={handleInputChange}\r\n        />\r\n\r\n        <TextField \r\n          id=\"bairro\" \r\n          label=\"Bairro\" \r\n          variant=\"filled\"\r\n          value={cliente.bairro}\r\n          required\r\n          fullWidth\r\n          onChange={handleInputChange}\r\n          error={errors?.bairro}\r\n          helperText={errors?.bairro}\r\n        />\r\n\r\n        <TextField \r\n          id=\"municipio\" \r\n          label=\"Município\" \r\n          variant=\"filled\"\r\n          value={cliente.municipio}\r\n          required\r\n          fullWidth\r\n          onChange={handleInputChange}\r\n          error={errors?.municipio}\r\n          helperText={errors?.municipio}\r\n        />\r\n\r\n        <TextField\r\n          id=\"uf\"\r\n          select\r\n          label=\"UF\"\r\n          value={cliente.uf}\r\n          onChange={event => handleInputChange(event, 'uf')}\r\n          helperText=\"(Selecione)\"\r\n          variant=\"filled\"\r\n          required\r\n          fullWidth\r\n          error={errors?.uf}\r\n          helperText={errors?.uf}\r\n        >\r\n          {unidadesFed.map((option) => (\r\n            <MenuItem key={option.sigla} value={option.sigla}>\r\n              {option.nome}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n\r\n        <InputMask\r\n          mask=\"(99) #9999-9999\"\r\n          formatChars={formatChars}\r\n          value={cliente.telefone}\r\n          onChange={handleInputChange}\r\n        >\r\n          {\r\n            () => <TextField \r\n              id=\"telefone\"\r\n              label=\"Telefone\" \r\n              variant=\"filled\"\r\n              required\r\n              fullWidth\r\n              error={errors?.telefone}\r\n              helperText={errors?.telefone}\r\n            />\r\n          }\r\n        </InputMask>\r\n\r\n        <TextField \r\n          id=\"email\" \r\n          label=\"E-mail\" \r\n          variant=\"filled\"\r\n          value={cliente.email}\r\n          required\r\n          fullWidth\r\n          type=\"email\"\r\n          onChange={handleInputChange}\r\n          error={errors?.email}\r\n          helperText={errors?.email}\r\n        />\r\n\r\n        <Toolbar className={classes.toolbar}>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            disabled={btnSendLabel !== 'Enviar'}\r\n          >\r\n            {btnSendLabel}\r\n          </Button>\r\n          \r\n          <Button variant=\"outlined\">Voltar</Button>\r\n        </Toolbar>\r\n\r\n      </form>\r\n\r\n    </>\r\n  )\r\n}","/workspace/karangos-mat-2021-2/src/routed/ClientesList.js",["49"],"import * as React from 'react'\r\nimport axios from 'axios'\r\nimport { DataGrid } from '@mui/x-data-grid'\r\nimport { makeStyles } from '@mui/styles'\r\nimport { IconButton } from '@mui/material'\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport { Paper } from '@mui/material'\r\nimport { Toolbar, Button } from '@mui/material'\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport { useHistory } from 'react-router-dom'\r\nimport ConfirmDialog from '../ui/ConfirmDialog'\r\nimport Snackbar from '@mui/material/Snackbar'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  dataGrid: {\r\n    // color: theme.palette.text.primary + ' !important',\r\n    '& .MuiTablePagination-root': {\r\n      color: theme.palette.text.primary\r\n    },/*\r\n    '& .MuiIconButton-root': {\r\n      color: theme.palette.text.primary + ' !important'\r\n    },*/\r\n    '& .MuiDataGrid-row button': {\r\n      visibility: 'hidden'\r\n    },\r\n    '& .MuiDataGrid-row:hover button': {\r\n      visibility: 'visible'\r\n    },\r\n    '& .MuiDataGrid-row:hover': {\r\n      backgroundColor: theme.palette.action.hover + ' !important'\r\n    }\r\n  },\r\n  toolbar: {\r\n    padding: 0,\r\n    margin: '20px 0',\r\n    justifyContent: 'flex-end'\r\n  }\r\n}))\r\n\r\nexport default function ClientesList() {\r\n\r\n  const classes = useStyles()\r\n\r\n  const history = useHistory()\r\n  \r\n  // Usando lazy initializer\r\n  const [state, setState] = React.useState(() => ({ \r\n    clientes: [],\r\n    deletable: null,\r\n    isDialogOpen: false,\r\n    isSnackOpen: false,\r\n    snackMessage: '',\r\n    isError: false\r\n  }))\r\n  const { clientes, deletable, isDialogOpen, isSnackOpen, snackMessage, isError } = state\r\n\r\n  function getData(otherState = state) {\r\n    // Buscando os dados na API do back-end (servidor remoto)\r\n    axios.get('https://api.faustocintra.com.br/clientes')\r\n    .then(\r\n      response => setState({...otherState, clientes: response.data})\r\n    )\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    getData()\r\n  }, [])\r\n\r\n  const columns = [\r\n    { \r\n      field: 'id', \r\n      headerName: 'Cód.',\r\n      width: 120\r\n    },\r\n    { \r\n      field: 'nome', \r\n      headerName: 'Nome do cliente',\r\n      width: 300\r\n    },\r\n    { \r\n      field: 'cpf', \r\n      headerName: 'CPF',\r\n      width: 200\r\n    },\r\n    { \r\n      field: 'telefone', \r\n      headerName: 'Telefone',\r\n      width: 200\r\n    },\r\n    { \r\n      field: 'email', \r\n      headerName: 'E-mail',\r\n      width: 300\r\n    },\r\n    {\r\n      field: 'editar',\r\n      headerName: 'Editar',\r\n      align: 'center',\r\n      headerAlign: 'center',\r\n      width: 100,\r\n      disableColumnMenu: true,\r\n      sortable: false,\r\n      renderCell: params => (\r\n        <IconButton \r\n          aria-label=\"editar\"\r\n          onClick={() => history.push(`/clientes/${params.id}`)}\r\n        >\r\n          <EditIcon />\r\n        </IconButton>\r\n      )\r\n    },\r\n    {\r\n      field: 'excluir',\r\n      headerName: 'Excluir',\r\n      align: 'center',\r\n      headerAlign: 'center',\r\n      width: 100,\r\n      disableColumnMenu: true,\r\n      sortable: false,\r\n      renderCell: params => (\r\n        <IconButton \r\n          aria-label=\"excluir\" \r\n          onClick={() => handleDelete(params.id)}\r\n        >\r\n          <DeleteForeverIcon color=\"error\" />\r\n        </IconButton>\r\n      )\r\n    }\r\n\r\n  ];\r\n\r\n  function handleDialogClose(answer) {\r\n\r\n    // Fecha a caixa de diálogo de confirmação\r\n    setState({...state, isDialogOpen: false})\r\n\r\n    // O usuário confirmou a exclusão\r\n    if(answer) {\r\n      \r\n        // Usa o axios para enviar uma ordem de exclusão\r\n        // para a API do back-end\r\n        axios.delete(`https://api.faustocintra.com.br/clientes/${deletable}`)\r\n        .then(\r\n          // Callback se ser certo\r\n          () => {\r\n            // Exibe o snackbar com a mensagem de sucesso\r\n            console.log({isDialogOpen})\r\n            const newState = {\r\n              ...state,\r\n              isError: false,\r\n              isSnackOpen: true,\r\n              isDialogOpen: false,\r\n              snackMessage: 'Item excluído com sucesso'\r\n            }\r\n            // Recarregar os dados da tabela\r\n            getData(newState)\r\n          }\r\n        )\r\n        .catch(\r\n          // Callback se der errado\r\n          error => {\r\n            // Exibe o snackbar com mensagem de erro\r\n            setState({\r\n              ...state,\r\n              isError: true,\r\n              isSnackOpen: true,\r\n              snackMessage: 'ERRO: não foi possível excluir o item. Motivo: ' + error.message\r\n            })\r\n          }\r\n        )\r\n    }\r\n    \r\n  }\r\n\r\n  function handleDelete(id) {\r\n    setState({...state, deletable: id, isDialogOpen: true})\r\n  }\r\n  \r\n  function handleSnackClose(event, reason) {\r\n    // Evita que o snackbar seja fechado clicando-se fora dele \r\n    if (reason === 'clickaway') return\r\n    \r\n    // Fechamento em condições normais\r\n    setState({...state, isSnackOpen: false})\r\n    //getData()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Listagem de clientes</h1>\r\n\r\n      <ConfirmDialog \r\n        title=\"Atenção\" \r\n        isOpen={isDialogOpen}\r\n        onClose={handleDialogClose}\r\n      >\r\n        Deseja realmente excluir este item?\r\n      </ConfirmDialog>\r\n\r\n      <Snackbar\r\n        open={isSnackOpen}\r\n        autoHideDuration={6000}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n        action={\r\n          <Button color=\"secondary\" onClick={handleSnackClose}>\r\n            {isError ? 'Que pena!' : 'Entendi'}\r\n          </Button>\r\n        }\r\n      />\r\n      \r\n      <Toolbar className={classes.toolbar}>\r\n        <Button \r\n          startIcon={<AddCircleIcon />}\r\n          variant=\"contained\" \r\n          size=\"large\" \r\n          color=\"secondary\"\r\n          onClick={() => history.push('/clientes/new')}\r\n        >\r\n          Cadastrar novo cliente\r\n        </Button>\r\n      </Toolbar>\r\n\r\n      <Paper elevation={4}>\r\n        <DataGrid className={classes.dataGrid}\r\n          rows={clientes}\r\n          columns={columns}\r\n          pageSize={5}\r\n          rowsPerPageOptions={[10]}\r\n          disableSelectionOnClick={true}\r\n          autoHeight={true}\r\n        />  \r\n      </Paper>\r\n    </>\r\n  )\r\n\r\n}","/workspace/karangos-mat-2021-2/src/ui/MainMenu.js",[],"/workspace/karangos-mat-2021-2/src/ui/ConfirmDialog.js",[],"/workspace/karangos-mat-2021-2/src/routed/KarangosList.js",["50"],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":13,"column":35,"nodeType":"57","messageId":"58","endLine":13,"endColumn":43},{"ruleId":"59","severity":1,"message":"60","line":365,"column":11,"nodeType":"61","messageId":"62","endLine":365,"endColumn":34},{"ruleId":"63","severity":1,"message":"64","line":68,"column":6,"nodeType":"65","endLine":68,"endColumn":8,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"64","line":69,"column":6,"nodeType":"65","endLine":69,"endColumn":8,"suggestions":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'validate' is defined but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["70"],["71"],"no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"72","fix":"74"},"Update the dependencies array to be: [getData]",{"range":"75","text":"76"},{"range":"77","text":"76"},[2007,2009],"[getData]",[2054,2056]]